subj.trial = trial.nr[i]
subj.str = c(subj.str,  as.numeric(unlist(strsplit(as.character(subj.str[10]), split=""))[subj.trial]))
correct.cup = as.numeric(unlist(strsplit(unlist(strsplit(unlist(strsplit(subj.str, split="_")[1])[3], split="-"))[1], split=""))[4])
# Choice
correct.choice <- NA
if(!is.na(as.numeric(unlist(strsplit(as.character(subj.str[10]), split=""))[subj.trial]))){
if(as.numeric(subj.str[12]) == correct.cup){correct.choice = 1}else if(as.numeric(subj.str[12]) != correct.cup){correct.choice = 0}}
subj.str = c(subj.str, correct.choice)
subj.time = time.table[time.table$stim== subj.stim,]
time.1 = c(subj.time$start_ms_abs, subj.time$att_on_ms_abs) # From start video to touch face
time.1 = round(time.1/1000*60)
time.2 = c(subj.time$att_on_ms_abs, subj.time$att_off_ms_abs) # Duration touch face
time.2 = round(time.2/1000*60)
time.3 = c(subj.time$att_off_ms_abs, subj.time$poi_on_ms_abs) # Move from touch face to point
time.3 = round(time.3/1000*60)
time.4 = c(subj.time$poi_on_ms_abs, subj.time$poi_off_ms_abs) # Extended point
time.4 = round(time.4/1000*60)
time.5 = c(subj.time$poi_off_ms_abs, subj.time$out_ms_abs) # Move from point to body
time.5 = round(time.5/1000*60)
# !!!
# time.4[2] <- time.5[2]
# time.4[1] <- time.3[1]
times.combi = matrix(c(time.1, time.2, time.3, time.4, time.5), nrow=2, ncol=5)
# cup1.hit = c()
# cup2.hit = c()
# cup3.hit = c()
time.hits.ver1 = c()
time.hits.ver2 = c()
for(b in 1:ncol(times.combi)){
time.x = subj.x[times.combi[1,b] : times.combi[2,b]]
time.y = subj.y[times.combi[1,b] : times.combi[2,b]]
cup1.hit = sum(time.x > aoi.cup1[1] & time.x < aoi.cup1[2] & time.y > aoi.cup1[3] & time.y < aoi.cup1[4], na.rm=T)
cup2.hit = sum(time.x > aoi.cup2[1] & time.x < aoi.cup2[2] & time.y > aoi.cup2[3] & time.y < aoi.cup2[4], na.rm=T)
cup3.hit = sum(time.x > aoi.cup3[1] & time.x < aoi.cup3[2] & time.y > aoi.cup3[3] & time.y < aoi.cup3[4], na.rm=T)
# !!!
# cup1.hit = cup1.hit/sum(c(cup1.hit, cup2.hit, cup3.hit), na.rm=T)
# cup2.hit = cup2.hit/sum(c(cup1.hit, cup2.hit, cup3.hit), na.rm=T)
# cup3.hit = cup3.hit/sum(c(cup1.hit, cup2.hit, cup3.hit), na.rm=T)
cup1.hit = cup1.hit/sum(c(cup1.hit, cup3.hit), na.rm=T)
cup2.hit = NA # cup2.hit/sum(c(cup1.hit, cup3.hit))
cup3.hit = cup3.hit/sum(c(cup1.hit, cup3.hit),na.rm=T)
# Look
if(correct.cup == 1){correct.roi = cup1.hit}else if(correct.cup == 2){correct.roi = cup2.hit}else if(correct.cup == 3){correct.roi = cup3.hit}
time.hits.ver1 = rbind(time.hits.ver1 , c(cup1.hit, cup2.hit, cup3.hit, correct.roi))
time.hits.ver2 = cbind(time.hits.ver2 , c(cup1.hit, cup2.hit, cup3.hit, correct.roi))
}
myData.combi.ver1 = rbind(myData.combi.ver1, cbind(t(matrix(rep(subj.str, 5), nrow=13, ncol=5)), c("time1", "time2", "time3", "time4", "time5"), time.hits.ver1))
myData.combi.ver2 = rbind(myData.combi.ver2, cbind(t(matrix(rep(subj.str, 4), nrow=13, ncol=4)), c("cup1", "cup2", "cup3", "correct"), time.hits.ver2))
}
myData.combi.ver1 = data.frame(myData.combi.ver1)
myData.combi.ver2 = data.frame(myData.combi.ver2)
names(myData.combi.ver1) =  c("stimulus", "study", "age", "condition", "gender", "yoke_video", "version", "side", "ID", "choices", "light", "which_cup", "correct_choice", "time_win", "roi_c1", "roi_c2", "roi_c3", "roi_cor")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="242363")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="243017")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="243102")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="244285") # Nur Reli grenzwertig
myData.combi.ver1 = subset(myData.combi.ver1, ID!="244573")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="245607") # Nur Reli grenzwertig
myData.combi.ver1 = subset(myData.combi.ver1, ID!="245891")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="246867")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="247453")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="242947")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="245553")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="246372")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="246643")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="246945")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="246993")
myData.combi.ver1 = subset(myData.combi.ver1, ID!="247350")
myData.combi.ver1 = droplevels(myData.combi.ver1)
myData.combi.ver1$roi_c1 = as.numeric(as.character(myData.combi.ver1$roi_c1))
myData.combi.ver1$roi_c2 = as.numeric(as.character(myData.combi.ver1$roi_c2))
myData.combi.ver1$roi_c3 = as.numeric(as.character(myData.combi.ver1$roi_c3))
myData.combi.ver1$roi_cor = as.numeric(as.character(myData.combi.ver1$roi_cor))
myData.combi.ver1$correct_choice = as.numeric(as.character(myData.combi.ver1$correct_choice))
# plot.data = subset(myData.combi.ver1, time_win=="time4"  & age=="M24" & grepl("-9", stimulus))
par(mfrow=c(1,2))
plot.data = subset(myData.combi.ver1, time_win=="time4"  & age=="M24")
bargraph.CI(correct_choice, roi_cor, condition, legend=T, data = plot.data, fun = function(x) mean(x, na.rm=T),lc=T, uc=T, main="M24 Looking Time Correct / Incorrect", ylim=c(0,1))
abline(h=1/3)
plot.data = subset(myData.combi.ver1, time_win=="time4"  & age=="M36")
bargraph.CI(correct_choice, roi_cor, condition, legend=T, data = plot.data, fun = function(x) mean(x, na.rm=T),lc=T, uc=T, main="M36 Looking Time Correct / Incorrect", ylim=c(0,1))
abline(h=1/3)
plot.data = subset(myData.combi.ver1, time_win=="time4")
bargraph.CI(correct_choice, roi_cor, legend=T, data = plot.data, fun = function(x) mean(x, na.rm=T),lc=T, uc=T, main="Looking Time Correct / Incorrect", ylim=c(0,1))
abline(h=1/3)
plot.data = subset(myData.combi.ver1, time_win=="time4")
bargraph.CI(age, roi_cor, condition, legend=T, data = plot.data, fun = function(x) mean(x, na.rm=T),lc=T, uc=T, main="Looking Time Correct / Incorrect", ylim=c(0,1))
write.table(myData.combi.ver1 , file="ETPIP_time_all_ver.txt", sep="\t", col.names=T, row.names=F)
write.table(myData.combi.ver2 , file="ETPIP_time_all_ver2.txt", sep="\t", col.names=T, row.names=F)
# plot(myData.combi.ver1 $roi_cor, myData.combi.ver1 $correct_choice)
# myData.combi.ver1[myData.combi.ver1$correct_choice==1 & !is.na(myData.combi.ver1$correct_choice),]$roi_cor <- NA
time.w4 = subset(myData.combi.ver1, time_win=="time4")
trial.count = rep(NA, nrow(time.w4))
trial.count[grepl('9',time.w4$stimulus)] <- 1
trial.count[grepl('11',time.w4$stimulus)] <- 2
trial.count[grepl('13',time.w4$stimulus)] <- 3
trial.count[grepl('15',time.w4$stimulus)] <- 4
trial.count[grepl('17',time.w4$stimulus)] <- 5
trial.count[grepl('19',time.w4$stimulus)] <- 6
trial.count[grepl('21',time.w4$stimulus)] <- 7
trial.count[grepl('23',time.w4$stimulus)] <- 8
trial.count[grepl('25',time.w4$stimulus)] <- 9
time.w4 = cbind(trial.count, time.w4)
# Double-check these:
time.w4 = subset(time.w4, ID!="248245")
time.w4 = subset(time.w4, ID!="248413")
time.w4 = droplevels(time.w4)
write.table(time.w4 , file="ET_PIP_data_EYE.txt", sep="\t", col.names=T, row.names=F)
#time.w4 = subset(time.w4, !is.na(roi_cor))
#time.w4 = subset(time.w4, !is.na(correct_choice))
time.w4.means = as.numeric(tapply(as.numeric(time.w4 $roi_cor), time.w4 $ID, FUN=mean, na.rm =T))
time.w4.choice = as.numeric(tapply(as.numeric(time.w4 $correct_choice), time.w4 $ID, FUN=mean, na.rm =T))
time.w4 = subset(time.w4, grepl("-9", time.w4 $stimulus))
time.w4 <- time.w4[order(as.numeric(as.character(time.w4 $ID))),]
time.w4 = cbind(time.w4, time.w4.means, time.w4.choice)
#par(mfrow=c(1,4))
bargraph.CI(age, time.w4.means, condition, legend=T, data = time.w4, fun = function(x) mean(x, na.rm=T),lc=T, uc=T, main="All cups", ylim=c(0,1))
abline(h=0.5)
write.table(time.w4.means , file="averaged_table.txt", sep="\t", col.names=T, row.names=F)
time.w4
res = aov(time.w4.means ~ condition*age + gender, data = time.w4)
summary(res)
res = aov(time.w4.means ~ condition*age + gender, data = time.w4)
summary(res)
dev.off()
tiff(file="./fig3_M24.tiff",
width=6, height=6, units="in", res=300)
plot(as.numeric(props.to.plot$condition), props.to.plot$prop, cex=sqrt(props.to.plot$freq)*1.5, xlim=c(0.5, 2.5), ylim=c(0,1.1), xaxt="n", xlab="", ylab="Proportion of Compliant Choices", las=1)
# load packages
library(Hmisc)
library(exactRankTests)
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# get data by id and condition
choices<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond), mean)
colnames(choices)<-c("id","condition","prop")
imitation<-aggregate(choice.data$imitation, list(choice.data$id, choice.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# get data by id and condition
choices<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond), mean)
colnames(choices)<-c("id","condition","prop")
imitation<-aggregate(choice.data$imitation, list(choice.data$id, choice.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
res=lm(choices$prop~imitation$prop*choices$condition)
anova(res)
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# get data by id and condition
choices<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond), mean)
colnames(choices)<-c("id","condition","prop")
imitation<-aggregate(choice.data$imitation, list(choice.data$id, choice.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
cor.test(choices$prop, imitation$prop, method= c("spearman"), exact = TRUE)
```{r imitation choice ancova, echo = T}
```{r imitation choice ancova, echo = T}
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# get data by id and condition
choices<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond), mean)
colnames(choices)<-c("id","condition","prop")
imitation<-aggregate(choice.data$imitation, list(choice.data$id, choice.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
res=lm(choices$prop~imitation$prop*choices$condition)
anova(res)
# load packages
library(lme4)
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# ztransform trial
choice.data$trial<-as.numeric(as.character(choice.data$trial))
choice.data$z.trial<-as.vector(scale(choice.data$trial))
# sex into m f
choice.data$mfsex<-"m"
choice.data$mfsex[choice.data$sex==0]<-"f"
choice.data$mfsex<-as.factor(choice.data$mfsex)
# dummy code age
choice.data$dumage=as.numeric(choice.data$age==levels(choice.data$age)[2])
# optimizer
glmer.control<-glmerControl(optCtrl=list(maxfun=1000000), optimizer = "bobyqa")
# Full Model
allres<-glmer(imitation~cond*age+z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
# #checkk stability
# source("./glmm_stability.r")
# allres_stab=glmm.model.stab(model.res=allres, contr=glmer.control, para=T)
# allres_stab$summary
### null model
allres.null<-glmer(imitation~z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
# full null comparison
results<-anova(allres.null, allres, test="Chisq")
results
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# drop levels
choice.data<-droplevels(choice.data)
# get props
props<-aggregate(choice.data$imitation, list(choice.data$id, choice.data$cond, choice.data$age), mean)
colnames(props)<-c("id","condition","age","imitation")
imi.agg<-aggregate(choice.data$imitation, list(choice.data$id, choice.data$cond, choice.data$age), mean)
colnames(imi.agg)<-c("id","condition","age","imitation")
res<-anova(lm(imitation ~ condition*age, data=imi.agg))
res
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
imi.data<-x.data[x.data$valid=="in",]
# drop levels
imi.data<-droplevels(imi.data)
# get props
props<-aggregate(imi.data$imitation, list(imi.data$id, imi.data$cond, imi.data$age), mean)
colnames(props)<-c("id","condition","age","imitation")
imi.agg<-aggregate(imi.data$imitation, list(imi.data$id, imi.data$cond, imi.data$age), mean)
colnames(imi.agg)<-c("id","condition","age","imitation")
res<-anova(lm(imitation ~ condition*age, data=imi.agg))
res
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
imi.data<-x.data[x.data$valid=="in",]
# aggregate
imitation<-aggregate(imi.data$imitation, list(imi.data$id, imi.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
wilcox.exact(ind.props$prop[ind.props$condition=="adul"], ind.props$prop[ind.props$condition=="peer"], exact=T, paired=F)
library(exactRankTests)
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
imi.data<-x.data[x.data$valid=="in",]
# aggregate
imitation<-aggregate(imi.data$imitation, list(imi.data$id, imi.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
wilcox.exact(ind.props$prop[ind.props$condition=="adul"], ind.props$prop[ind.props$condition=="peer"], exact=T, paired=F)
library(coin)
install.packages(coin)
install.packages("coin")
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
imi.data<-x.data[x.data$valid=="in",]
# aggregate
imitation<-aggregate(imi.data$imitation, list(imi.data$id, imi.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
wilcox.exact(ind.props$prop[ind.props$condition=="adul"], ind.props$prop[ind.props$condition=="peer"], exact=T, paired=F)
wilcox.exact(imitation$prop[imitation$condition=="adul"], imitation$prop[imitation$condition=="peer"], exact=T, paired=F)
library(coin)
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
imi.data<-x.data[x.data$valid=="in",]
# aggregate
imitation<-aggregate(imi.data$imitation, list(imi.data$id, imi.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
res<-wilcox.exact(imitation$prop[imitation$condition=="adul"], imitation$prop[imitation$condition=="peer"], exact=T, paired=F)
res
library(exactRankTests)
library(exactRankTests)
#library(coin)
library(exactRankTests)
# NEW Path (06/2019) references data when in the same folder
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
imi.data<-x.data[x.data$valid=="in",]
# aggregate
imitation<-aggregate(imi.data$imitation, list(imi.data$id, imi.data$cond), mean)
colnames(imitation)<-c("id","condition","prop")
res<-wilcox.exact(imitation$prop[imitation$condition=="adul"], imitation$prop[imitation$condition=="peer"], exact=T, paired=F)
# load data from same folder as script
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# ztransform trial
choice.data$trial<-as.numeric(as.character(choice.data$trial))
choice.data$z.trial<-as.vector(scale(choice.data$trial))
# sex into m f
choice.data$mfsex<-"m"
choice.data$mfsex[choice.data$sex==0]<-"f"
choice.data$mfsex<-as.factor(choice.data$mfsex)
# dummy code age
choice.data$dumage=as.numeric(choice.data$age==levels(choice.data$age)[2])
# check data: n=96, only valid data 840 observations 03.11.2016
str(choice.data)
# test for complete separation
source("./diagnostic_fcns.r")
# test for complete separation
source("./diagnostic_fcns.r")
library(lme4)
#library(car)
# optimizer
glmer.control<-glmerControl(optCtrl=list(maxfun=1000000), optimizer = "bobyqa")
# Full Model
allres<-glmer(corr~cond*age+z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
# load data from same folder as script
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# ztransform trial
choice.data$trial<-as.numeric(as.character(choice.data$trial))
choice.data$z.trial<-as.vector(scale(choice.data$trial))
# sex into m f
choice.data$mfsex<-"m"
choice.data$mfsex[choice.data$sex==0]<-"f"
choice.data$mfsex<-as.factor(choice.data$mfsex)
# dummy code age
choice.data$dumage=as.numeric(choice.data$age==levels(choice.data$age)[2])
# check data: n=96, only valid data 840 observations 03.11.2016
# str(choice.data)
# #### test for complete separation
# source("./diagnostic_fcns.r")
# # make object
# rancheck<-fe.re.tab(fe.model="corr~cond*age+z.trial+mfsex", re=c("id", "video"), data=choice.data)
# # sow summary
# rancheck$summary
# ### checking for complete separation
# table(choice.data$corr, choice.data$cond)
# table(choice.data$corr, choice.data$cond, choice.data$age)
# table(choice.data$corr, choice.data$sex)
### Define Model
# packages
library(lme4)
#library(car)
# optimizer
glmer.control<-glmerControl(optCtrl=list(maxfun=1000000), optimizer = "bobyqa")
### Full Model
allres<-glmer(corr~cond*age+z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
### Null Model
allres.null<-glmer(corr~z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
### FULL NULL COMPARISON
anova(allres.null, allres, test="Chisq")
resfullnull<-anova(allres.null, allres, test="Chisq")
drop1(scope=~cond:age, object=allres, test="Chisq")
summary(allres)
# load data from same folder as script
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# ztransform trial
choice.data$trial<-as.numeric(as.character(choice.data$trial))
choice.data$z.trial<-as.vector(scale(choice.data$trial))
# sex into m f
choice.data$mfsex<-"m"
choice.data$mfsex[choice.data$sex==0]<-"f"
choice.data$mfsex<-as.factor(choice.data$mfsex)
# dummy code age
choice.data$dumage=as.numeric(choice.data$age==levels(choice.data$age)[2])
# check data: n=96, only valid data 840 observations 03.11.2016
# str(choice.data)
# #### test for complete separation
# source("./diagnostic_fcns.r")
# # make object
# rancheck<-fe.re.tab(fe.model="corr~cond*age+z.trial+mfsex", re=c("id", "video"), data=choice.data)
# # sow summary
# rancheck$summary
# ### checking for complete separation
# table(choice.data$corr, choice.data$cond)
# table(choice.data$corr, choice.data$cond, choice.data$age)
# table(choice.data$corr, choice.data$sex)
### Define Model
# packages
library(lme4)
#library(car)
# optimizer
glmer.control<-glmerControl(optCtrl=list(maxfun=1000000), optimizer = "bobyqa")
### Full Model
allres<-glmer(corr~cond*age+z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
### Null Model
allres.null<-glmer(corr~z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
### FULL NULL COMPARISON
resfullnull<-anova(allres.null, allres, test="Chisq")
# Models:
# allres.null: corr ~ z.trial + mfsex + (1 | id) + (0 + z.trial | id) + (1 |
# allres.null:     video) + (0 + z.trial | video) + (0 + dumage | video)
# allres: corr ~ cond * age + z.trial + mfsex + (1 | id) + (0 + z.trial |
# allres:     id) + (1 | video) + (0 + z.trial | video) + (0 + dumage |
# allres:     video)
#             Df    AIC    BIC  logLik deviance  Chisq Chi Df Pr(>Chisq)
# allres.null  8 837.66 875.52 -410.83   821.66
# allres      11 818.80 870.87 -398.40   796.80 24.858      3  1.653e-05 ***
resdrop<-drop1(scope=~cond:age, object=allres, test="Chisq")
# Single term deletions
#
# Model:
# corr ~ cond * age + z.trial + mfsex + (1 | id) + (0 + z.trial |
#     id) + (1 | video) + (0 + z.trial | video) + (0 + dumage |
#     video)
#          Df    AIC     LRT Pr(Chi)
# <none>      818.80
# cond:age  1 816.96 0.16569   0.684
res_final<-summary(allres)
# Fixed effects:
#                 Estimate Std. Error z value Pr(>|z|)
# (Intercept)      0.93336    0.38061   2.452 0.014195 *
# condpeer        -0.92269    0.46118  -2.001 0.045425 *
# ageM36           1.95540    0.54388   3.595 0.000324 ***
# z.trial          0.06956    0.11082   0.628 0.530190
# mfsexm          -0.01781    0.37883  -0.047 0.962508
# condpeer:ageM36  0.29847    0.72444   0.412 0.680340
```{r choice full null, echo = T}
# load data from same folder as script
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# ztransform trial
choice.data$trial<-as.numeric(as.character(choice.data$trial))
choice.data$z.trial<-as.vector(scale(choice.data$trial))
# sex into m f
choice.data$mfsex<-"m"
choice.data$mfsex[choice.data$sex==0]<-"f"
choice.data$mfsex<-as.factor(choice.data$mfsex)
# dummy code age
choice.data$dumage=as.numeric(choice.data$age==levels(choice.data$age)[2])
# check data: n=96, only valid data 840 observations 03.11.2016
# str(choice.data)
# #### test for complete separation
# source("./diagnostic_fcns.r")
# # make object
# rancheck<-fe.re.tab(fe.model="corr~cond*age+z.trial+mfsex", re=c("id", "video"), data=choice.data)
# # sow summary
# rancheck$summary
# ### checking for complete separation
# table(choice.data$corr, choice.data$cond)
# table(choice.data$corr, choice.data$cond, choice.data$age)
# table(choice.data$corr, choice.data$sex)
### Define Model
# packages
library(lme4)
#library(car)
# optimizer
glmer.control<-glmerControl(optCtrl=list(maxfun=1000000), optimizer = "bobyqa")
### Full Model
allres<-glmer(corr~cond*age+z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
### Null Model
allres.null<-glmer(corr~z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
### FULL NULL COMPARISON
resfullnull<-anova(allres.null, allres, test="Chisq")
# Models:
# allres.null: corr ~ z.trial + mfsex + (1 | id) + (0 + z.trial | id) + (1 |
# allres.null:     video) + (0 + z.trial | video) + (0 + dumage | video)
# allres: corr ~ cond * age + z.trial + mfsex + (1 | id) + (0 + z.trial |
# allres:     id) + (1 | video) + (0 + z.trial | video) + (0 + dumage |
# allres:     video)
#             Df    AIC    BIC  logLik deviance  Chisq Chi Df Pr(>Chisq)
# allres.null  8 837.66 875.52 -410.83   821.66
# allres      11 818.80 870.87 -398.40   796.80 24.858      3  1.653e-05 ***
resdrop<-drop1(scope=~cond:age, object=allres, test="Chisq")
# Single term deletions
#
# Model:
# corr ~ cond * age + z.trial + mfsex + (1 | id) + (0 + z.trial |
#     id) + (1 | video) + (0 + z.trial | video) + (0 + dumage |
#     video)
#          Df    AIC     LRT Pr(Chi)
# <none>      818.80
# cond:age  1 816.96 0.16569   0.684
res_final<-summary(allres)
# Fixed effects:
#                 Estimate Std. Error z value Pr(>|z|)
# (Intercept)      0.93336    0.38061   2.452 0.014195 *
# condpeer        -0.92269    0.46118  -2.001 0.045425 *
# ageM36           1.95540    0.54388   3.595 0.000324 ***
# z.trial          0.06956    0.11082   0.628 0.530190
# mfsexm          -0.01781    0.37883  -0.047 0.962508
# condpeer:ageM36  0.29847    0.72444   0.412 0.680340
allresred<-glmer(corr~cond+age+z.trial+mfsex+(1|id)+(0+z.trial|id)+(1|video)+(0+z.trial|video)+(0+dumage|video), data=choice.data, family=binomial, control=glmer.control)
drop1(allresred, test="Chisq")
summary(allresred)
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in",]
# drop levels and check exclusion
choice.data<-droplevels(choice.data)
# get props
props<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond, choice.data$age), mean)
colnames(props)<-c("id","condition","age","prop")
choice.agg<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond, choice.data$age), mean)
colnames(choice.agg)<-c("id","condition","age","prop")
res<-anova(lm(prop ~ condition*age, data=choice.agg))
res
# load data from same folder as script
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in" & x.data$age=="M24",]
# drop levels and check exclusion
choice.data<-droplevels(choice.data)
# get indicidual props
ind.props<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond), mean)
colnames(ind.props)<-c("ind","condition","prop")
wilcox.exact(ind.props$prop[ind.props$condition=="adul"], ind.props$prop[ind.props$condition=="peer"], exact=T, paired=F)
# load package
library(exactRankTests)
# load data from same folder as script
x.data<-read.table("./ET_PIP_data_publication.txt",sep="\t", header=T)
# get only valid trials
choice.data<-x.data[x.data$valid=="in" & x.data$age=="M24",]
# drop levels and check exclusion
choice.data<-droplevels(choice.data)
# get indicidual props
ind.props<-aggregate(choice.data$corr, list(choice.data$id, choice.data$cond), mean)
colnames(ind.props)<-c("ind","condition","prop")
wilcox.exact(ind.props$prop[ind.props$condition=="adul"], ind.props$prop[ind.props$condition=="peer"], exact=T, paired=F)
